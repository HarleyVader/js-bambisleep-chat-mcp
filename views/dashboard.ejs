<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BambiSleep Content Analyzer Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .card {
            backdrop-filter: blur(10px);
            background: rgba(255, 255, 255, 0.9);
            border: none;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        .site-card {
            transition: transform 0.2s;
        }
        .site-card:hover {
            transform: translateY(-5px);
        }
        .relevance-badge {
            font-size: 0.8rem;
        }
        .url-input {
            border-radius: 25px;
        }
        .analyze-btn {
            border-radius: 25px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            border: none;
        }
        .loading-spinner {
            display: none;
        }
    </style>
</head>
<body class="gradient-bg">
    <div class="container py-5">
        <!-- Header -->
        <div class="row mb-5">
            <div class="col-12 text-center">
                <h1 class="text-white mb-3">
                    <i class="bi bi-brain me-3"></i>
                    BambiSleep Content Analyzer
                </h1>
                <p class="text-white-50">Powered by LM Studio & MongoDB</p>
            </div>
        </div>

        <!-- URL Analysis Section -->
        <div class="row mb-5">
            <div class="col-12">
                <div class="card">
                    <div class="card-body p-4">
                        <h3 class="card-title mb-4">
                            <i class="bi bi-search me-2"></i>
                            Analyze New URL
                        </h3>
                        <form id="urlAnalysisForm">
                            <div class="input-group mb-3">
                                <input 
                                    type="url" 
                                    class="form-control url-input" 
                                    id="urlInput" 
                                    placeholder="Enter URL to analyze (e.g., https://example.com)"
                                    required
                                >
                                <button class="btn btn-primary analyze-btn px-4" type="submit">
                                    <span class="analyze-text">
                                        <i class="bi bi-lightning-fill me-2"></i>
                                        Analyze
                                    </span>
                                    <span class="loading-spinner">
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        Analyzing...
                                    </span>
                                </button>
                            </div>
                        </form>
                        
                        <!-- Analysis Results -->
                        <div id="analysisResults" class="mt-3" style="display: none;">
                            <div class="alert alert-info">
                                <h6><i class="bi bi-info-circle me-2"></i>Analysis Results</h6>
                                <div id="resultContent"></div>
                            </div>
                        </div>
                    </div>
                </div>            </div>
        </div>

        <!-- Enhanced AI Features Section -->
        <div class="row mb-5">
            <div class="col-12">
                <div class="card">
                    <div class="card-body p-4">
                        <h3 class="card-title mb-4">
                            <i class="bi bi-robot me-2"></i>
                            AI-Powered Analysis & Content Generation
                        </h3>
                        
                        <!-- AI Analysis Panel -->
                        <div class="row mb-4">
                            <div class="col-md-6 mb-3">
                                <div class="card border-primary">
                                    <div class="card-body text-center">
                                        <h5><i class="bi bi-search me-2"></i>Database Analysis</h5>
                                        <p class="text-muted">AI-powered comprehensive analysis of all stored content</p>
                                        <button class="btn btn-primary" onclick="runDatabaseAnalysis()">
                                            <span id="analysisButtonText">Analyze All Content</span>
                                            <span id="analysisSpinner" class="spinner-border spinner-border-sm ms-2" style="display: none;"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="card border-success">
                                    <div class="card-body text-center">
                                        <h5><i class="bi bi-plus-circle me-2"></i>Content Generation</h5>
                                        <p class="text-muted">Generate guides, stories, and analysis using AI</p>
                                        <button class="btn btn-success" onclick="showContentGenerator()">
                                            Open Generator
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- AI Search Panel -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <div class="card border-info">
                                    <div class="card-body">
                                        <h5><i class="bi bi-search-heart me-2"></i>AI-Enhanced Search</h5>
                                        <form id="aiSearchForm" class="row g-3">
                                            <div class="col-md-8">
                                                <input type="text" class="form-control" id="searchQuery" 
                                                       placeholder="Search BambiSleep content with AI summaries...">
                                            </div>
                                            <div class="col-md-2">
                                                <select class="form-select" id="searchLimit">
                                                    <option value="5">Top 5</option>
                                                    <option value="10" selected>Top 10</option>
                                                    <option value="20">Top 20</option>
                                                </select>
                                            </div>
                                            <div class="col-md-2">
                                                <button type="submit" class="btn btn-info w-100">
                                                    <i class="bi bi-search me-1"></i>Search
                                                </button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Results Panels -->
                        <div id="aiAnalysisResults" style="display: none;">
                            <div class="alert alert-success">
                                <h6><i class="bi bi-check-circle me-2"></i>Analysis Complete</h6>
                                <div id="analysisResultContent"></div>
                            </div>
                        </div>

                        <div id="searchResults" style="display: none;">
                            <div class="alert alert-info">
                                <h6><i class="bi bi-search me-2"></i>Search Results</h6>
                                <div id="searchResultContent"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Content Generation Modal -->
        <div class="modal fade" id="contentGeneratorModal" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="bi bi-magic me-2"></i>AI Content Generator
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="contentGeneratorForm">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label class="form-label">Content Type</label>
                                    <select class="form-select" id="contentType" required>
                                        <option value="">Select type...</option>
                                        <option value="guide">Guide</option>
                                        <option value="story">Story</option>
                                        <option value="analysis">Analysis</option>
                                        <option value="script">Script</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Topic/Theme</label>
                                    <input type="text" class="form-control" id="contentTopic" 
                                           placeholder="e.g., beginner safety guide">
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Target Audience</label>
                                    <select class="form-select" id="contentAudience">
                                        <option value="">Select audience...</option>
                                        <option value="beginners">Beginners</option>
                                        <option value="experienced">Experienced</option>
                                        <option value="researchers">Researchers</option>
                                        <option value="general">General</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Length</label>
                                    <select class="form-select" id="contentLength">
                                        <option value="">Select length...</option>
                                        <option value="short">Short (200-400 words)</option>
                                        <option value="medium">Medium (400-800 words)</option>
                                        <option value="long">Long (800+ words)</option>
                                    </select>
                                </div>
                                <!-- Story-specific fields -->
                                <div id="storyFields" style="display: none;">
                                    <div class="col-md-6">
                                        <label class="form-label">Perspective</label>
                                        <select class="form-select" id="storyPerspective">
                                            <option value="">Select perspective...</option>
                                            <option value="first-person">First Person</option>
                                            <option value="third-person">Third Person</option>
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">Setting</label>
                                        <input type="text" class="form-control" id="storySetting" 
                                               placeholder="e.g., personal journey, bedroom">
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="saveToDatabase" checked>
                                        <label class="form-check-label" for="saveToDatabase">
                                            Save generated content to database
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="generateContent()">
                            <span id="generateButtonText">Generate Content</span>
                            <span id="generateSpinner" class="spinner-border spinner-border-sm ms-2" style="display: none;"></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Generated Content Modal -->
        <div class="modal fade" id="generatedContentModal" tabindex="-1">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="bi bi-file-text me-2"></i>Generated Content
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div id="generatedContentDisplay" style="white-space: pre-wrap; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" onclick="copyToClipboard()">
                            <i class="bi bi-clipboard me-1"></i>Copy to Clipboard
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Statistics -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h2 class="text-primary"><%= stats.totalSites || 0 %></h2>
                        <p class="text-muted mb-0">Total Sites</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h2 class="text-success"><%= stats.highRelevance || 0 %></h2>
                        <p class="text-muted mb-0">High Relevance (70%+)</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h2 class="text-info"><%= Math.round(stats.avgScore || 0) %>%</h2>
                        <p class="text-muted mb-0">Average Score</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h2 class="text-warning"><%= stats.todayCount || 0 %></h2>
                        <p class="text-muted mb-0">Added Today</p>
                    </div>
                </div>
            </div>        </div>

        <!-- AI Features Section -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="bi bi-robot me-2"></i>AI-Powered Features</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3 mb-3">
                                <button class="btn btn-primary w-100" onclick="runDatabaseAnalysis()">
                                    <i class="bi bi-search me-2"></i>
                                    Analyze All Content
                                </button>
                            </div>
                            <div class="col-md-3 mb-3">
                                <button class="btn btn-success w-100" onclick="showContentGenerator()">
                                    <i class="bi bi-plus-circle me-2"></i>
                                    Generate Content
                                </button>
                            </div>
                            <div class="col-md-3 mb-3">
                                <button class="btn btn-info w-100" onclick="showAISearch()">
                                    <i class="bi bi-magic me-2"></i>
                                    AI Search
                                </button>
                            </div>
                            <div class="col-md-3 mb-3">
                                <button class="btn btn-warning w-100" onclick="testLMStudio()">
                                    <i class="bi bi-gear me-2"></i>
                                    Test LM Studio
                                </button>
                            </div>
                        </div>
                        
                        <!-- AI Results Area -->
                        <div id="aiResults" class="mt-3" style="display: none;">
                            <div class="alert alert-success">
                                <h6><i class="bi bi-robot me-2"></i>AI Results</h6>
                                <div id="aiResultContent"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filters and Search -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <div class="row align-items-end">
                            <div class="col-md-4">
                                <label for="searchInput" class="form-label">Search Sites</label>
                                <input type="text" class="form-control" id="searchInput" placeholder="Search titles, descriptions, or keywords...">
                            </div>
                            <div class="col-md-3">
                                <label for="scoreFilter" class="form-label">Minimum Score</label>
                                <select class="form-select" id="scoreFilter">
                                    <option value="0">All Scores</option>
                                    <option value="70">High (70%+)</option>
                                    <option value="40">Medium (40%+)</option>
                                    <option value="20">Low (20%+)</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="sortFilter" class="form-label">Sort By</label>
                                <select class="form-select" id="sortFilter">
                                    <option value="addedAt">Date Added</option>
                                    <option value="relevance_score">Relevance Score</option>
                                    <option value="title">Title</option>
                                    <option value="viewCount">View Count</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <button class="btn btn-outline-primary w-100" onclick="applyFilters()">
                                    <i class="bi bi-funnel"></i> Filter
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sites List -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h3 class="mb-0">
                            <i class="bi bi-collection me-2"></i>
                            BambiSleep Sites Database
                        </h3>
                    </div>
                    <div class="card-body">
                        <% if (sites.length === 0) { %>
                            <div class="text-center py-5">
                                <i class="bi bi-inbox display-1 text-muted"></i>
                                <h4 class="mt-3 text-muted">No sites analyzed yet</h4>
                                <p class="text-muted">Use the analyzer above to start discovering BambiSleep content</p>
                            </div>
                        <% } else { %>
                            <div class="row">
                                <% sites.forEach(site => { %>
                                    <div class="col-md-6 col-lg-4 mb-4">
                                        <div class="card site-card h-100">
                                            <div class="card-body">
                                                <div class="d-flex justify-content-between align-items-start mb-2">
                                                    <h6 class="card-title text-truncate" title="<%= site.title %>">
                                                        <%= site.title || 'Untitled' %>
                                                    </h6>
                                                    <span class="badge relevance-badge 
                                                        <% if (site.relevance_score >= 80) { %>bg-success<% } 
                                                        else if (site.relevance_score >= 60) { %>bg-warning<% } 
                                                        else { %>bg-secondary<% } %>">
                                                        <%= site.relevance_score %>%
                                                    </span>
                                                </div>
                                                
                                                <p class="card-text small text-muted mb-2">
                                                    <%= site.content_summary.substring(0, 100) %>...
                                                </p>
                                                
                                                <% if (site.keywords && site.keywords.length > 0) { %>
                                                    <div class="mb-2">
                                                        <% site.keywords.slice(0, 3).forEach(keyword => { %>
                                                            <span class="badge bg-light text-dark me-1"><%= keyword %></span>
                                                        <% }) %>
                                                    </div>
                                                <% } %>
                                                
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <small class="text-muted">
                                                        <i class="bi bi-clock me-1"></i>
                                                        <%= new Date(site.addedAt).toLocaleDateString() %>
                                                    </small>
                                                    <a href="<%= site.url %>" target="_blank" class="btn btn-sm btn-outline-primary">
                                                        <i class="bi bi-box-arrow-up-right"></i>
                                                    </a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                <% }) %>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentSites = [];
        let filteredSites = [];

        // Load sites on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadSites();
        });

        async function loadSites() {
            try {
                const response = await fetch('/api/sites');
                const data = await response.json();
                currentSites = data.sites || [];
                filteredSites = [...currentSites];
                renderSites(filteredSites);
            } catch (error) {
                console.error('Failed to load sites:', error);
            }
        }

        function applyFilters() {
            const search = document.getElementById('searchInput').value.toLowerCase();
            const minScore = parseInt(document.getElementById('scoreFilter').value);
            const sortBy = document.getElementById('sortFilter').value;

            filteredSites = currentSites.filter(site => {
                const matchesSearch = !search || 
                    site.title.toLowerCase().includes(search) ||
                    site.content_summary.toLowerCase().includes(search) ||
                    (site.keywords && site.keywords.some(k => k.toLowerCase().includes(search)));
                
                const matchesScore = site.relevance_score >= minScore;
                
                return matchesSearch && matchesScore;
            });

            // Sort sites
            filteredSites.sort((a, b) => {
                switch(sortBy) {
                    case 'relevance_score':
                        return b.relevance_score - a.relevance_score;
                    case 'title':
                        return a.title.localeCompare(b.title);
                    case 'viewCount':
                        return (b.viewCount || 0) - (a.viewCount || 0);
                    default: // addedAt
                        return new Date(b.addedAt) - new Date(a.addedAt);
                }
            });

            renderSites(filteredSites);
        }

        function renderSites(sites) {
            const container = document.getElementById('sitesContainer');
            
            if (sites.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-5">
                        <i class="bi bi-search display-1 text-muted"></i>
                        <h4 class="mt-3 text-muted">No sites found</h4>
                        <p class="text-muted">Try adjusting your filters or search terms</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = sites.map(site => `
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card site-card h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <h6 class="card-title text-truncate" title="${site.title || 'Untitled'}">
                                    ${site.title || 'Untitled'}
                                </h6>
                                <div class="d-flex gap-1">
                                    <span class="badge relevance-badge ${getScoreBadgeClass(site.relevance_score)}">
                                        ${site.relevance_score}%
                                    </span>
                                    ${site.analysis?.confidence ? `<span class="badge bg-secondary">${site.analysis.confidence}</span>` : ''}
                                </div>
                            </div>
                            
                            <p class="card-text small text-muted mb-2">
                                ${(site.content_summary || '').substring(0, 100)}...
                            </p>
                            
                            ${site.keywords && site.keywords.length > 0 ? `
                                <div class="mb-2">
                                    ${site.keywords.slice(0, 3).map(keyword => 
                                        `<span class="badge bg-light text-dark me-1">${keyword}</span>`
                                    ).join('')}
                                </div>
                            ` : ''}
                            
                            ${site.analysis?.contentType ? `
                                <div class="mb-2">
                                    <small class="text-muted">
                                        <i class="bi bi-tag me-1"></i>
                                        ${site.analysis.contentType}
                                    </small>
                                </div>
                            ` : ''}
                            
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">
                                    <i class="bi bi-clock me-1"></i>
                                    ${new Date(site.addedAt).toLocaleDateString()}
                                    ${site.viewCount ? `<br><i class="bi bi-eye me-1"></i>${site.viewCount} views` : ''}
                                </small>
                                <div>
                                    <button class="btn btn-sm btn-outline-danger me-1" onclick="deleteSite('${site.url}')" title="Delete">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                    <a href="${site.url}" target="_blank" class="btn btn-sm btn-outline-primary" onclick="incrementViewCount('${site.url}')" title="Visit Site">
                                        <i class="bi bi-box-arrow-up-right"></i>
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function getScoreBadgeClass(score) {
            if (score >= 80) return 'bg-success';
            if (score >= 60) return 'bg-warning';
            return 'bg-secondary';
        }

        async function incrementViewCount(url) {
            try {
                await fetch(`/api/sites/${encodeURIComponent(url)}/view`, { method: 'POST' });
            } catch (error) {
                console.error('Failed to increment view count:', error);
            }
        }

        async function deleteSite(url) {
            if (!confirm('Are you sure you want to delete this site?')) return;
            
            try {
                const response = await fetch(`/api/sites/${encodeURIComponent(url)}`, { method: 'DELETE' });
                if (response.ok) {
                    loadSites(); // Reload the sites
                } else {
                    alert('Failed to delete site');
                }
            } catch (error) {
                console.error('Failed to delete site:', error);
                alert('Failed to delete site');
            }
        }

        // URL Analysis Form
        document.getElementById('urlAnalysisForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const urlInput = document.getElementById('urlInput');
            const analyzeText = document.querySelector('.analyze-text');
            const loadingSpinner = document.querySelector('.loading-spinner');
            const resultsDiv = document.getElementById('analysisResults');
            const resultContent = document.getElementById('resultContent');
            
            if (!urlInput.value.trim()) return;
            
            // Show loading state
            analyzeText.style.display = 'none';
            loadingSpinner.style.display = 'inline';
            resultsDiv.style.display = 'none';
            
            try {
                const response = await fetch('/api/analyze-url', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ url: urlInput.value.trim() })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    const { analysis, content, savedToDatabase } = data;
                    resultContent.innerHTML = `
                        <div class="row">
                            <div class="col-md-6">
                                <strong>Title:</strong> ${content.title || 'N/A'}<br>
                                <strong>BambiSleep Related:</strong> 
                                <span class="badge ${analysis.isBambiSleep ? 'bg-success' : 'bg-danger'}">
                                    ${analysis.isBambiSleep ? 'Yes' : 'No'}
                                </span><br>
                                <strong>Relevance Score:</strong> ${analysis.relevanceScore}%<br>
                                <strong>Confidence:</strong> ${analysis.confidence || 'N/A'}<br>
                                <strong>Analysis Method:</strong> ${analysis.analysisMethod || 'N/A'}
                            </div>
                            <div class="col-md-6">
                                <strong>Summary:</strong><br>
                                <small>${analysis.summary}</small>
                                ${analysis.contentType ? `<br><br><strong>Content Type:</strong> ${analysis.contentType}` : ''}
                            </div>
                        </div>
                    `;
                    
                    if (savedToDatabase) {
                        resultContent.innerHTML += `
                            <div class="alert alert-success mt-2">
                                <i class="bi bi-check-circle me-2"></i>
                                Site has been added to the database!
                            </div>
                        `;
                        // Refresh sites list after 2 seconds
                        setTimeout(() => loadSites(), 2000);
                    }
                    
                    resultsDiv.style.display = 'block';
                } else {
                    throw new Error(data.error || 'Analysis failed');
                }
            } catch (error) {
                resultContent.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        Error: ${error.message}
                    </div>
                `;
                resultsDiv.style.display = 'block';
            } finally {
                // Reset button state
                analyzeText.style.display = 'inline';
                loadingSpinner.style.display = 'none';
            }
        });        // Search on enter key
        document.getElementById('searchInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                applyFilters();
            }
        });

        // AI Feature Functions
        async function runDatabaseAnalysis() {
            showAIResults('Running comprehensive AI analysis of all database content...');
            
            try {
                const response = await fetch('/api/ai/analyze-database', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showAIResults(`
                        <h6>Database Analysis Complete!</h6>
                        <pre style="white-space: pre-wrap; font-size: 0.9em;">${data.report}</pre>
                    `);
                } else {
                    throw new Error(data.error);
                }
            } catch (error) {
                showAIResults(`<div class="alert alert-danger">Error: ${error.message}</div>`);
            }
        }

        async function testLMStudio() {
            showAIResults('Testing LM Studio connection...');
            
            try {
                const response = await fetch('/api/ai/test-connection');
                const data = await response.json();
                
                if (data.success) {
                    showAIResults(`
                        <div class="alert alert-success">
                            <h6>✅ LM Studio Connected Successfully!</h6>
                            <p>Response: ${data.response}</p>
                            <small>Timestamp: ${data.timestamp}</small>
                        </div>
                    `);
                } else {
                    throw new Error(data.error);
                }
            } catch (error) {
                showAIResults(`<div class="alert alert-danger">❌ Connection Failed: ${error.message}</div>`);
            }
        }

        function showContentGenerator() {
            showAIResults(`
                <div class="row">
                    <div class="col-md-6">
                        <h6>Generate BambiSleep Content</h6>
                        <div class="mb-3">
                            <label class="form-label">Content Type</label>
                            <select class="form-select" id="contentType">
                                <option value="guide">Guide</option>
                                <option value="story">Story</option>
                                <option value="analysis">Analysis</option>
                                <option value="script">Script</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Topic</label>
                            <input type="text" class="form-control" id="contentTopic" placeholder="e.g., safe practices for beginners">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Target Audience</label>
                            <input type="text" class="form-control" id="contentAudience" placeholder="e.g., newcomers, advanced users">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Length</label>
                            <select class="form-select" id="contentLength">
                                <option value="short">Short (200-400 words)</option>
                                <option value="medium">Medium (400-800 words)</option>
                                <option value="long">Long (800+ words)</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Theme (for stories)</label>
                            <input type="text" class="form-control" id="contentTheme" placeholder="e.g., self-discovery">
                        </div>
                        <div class="mb-3">
                            <label class="form-check">
                                <input type="checkbox" class="form-check-input" id="saveToDatabase">
                                <span class="form-check-label">Save to database</span>
                            </label>
                        </div>
                        <button class="btn btn-success" onclick="generateContent()">Generate Content</button>
                    </div>
                </div>
            `);
        }

        function showAISearch() {
            showAIResults(`
                <h6>AI-Powered Search</h6>
                <div class="row">
                    <div class="col-md-8">
                        <input type="text" class="form-control" id="aiSearchQuery" placeholder="Search for content...">
                    </div>
                    <div class="col-md-2">
                        <input type="number" class="form-control" id="aiSearchLimit" value="10" min="1" max="50" placeholder="Limit">
                    </div>
                    <div class="col-md-2">
                        <button class="btn btn-info w-100" onclick="performAISearch()">Search</button>
                    </div>
                </div>
            `);
        }

        async function generateContent() {
            const type = document.getElementById('contentType').value;
            const topic = document.getElementById('contentTopic').value;
            const audience = document.getElementById('contentAudience').value;
            const length = document.getElementById('contentLength').value;
            const theme = document.getElementById('contentTheme').value;
            const saveToDatabase = document.getElementById('saveToDatabase').checked;

            showAIResults('Generating content... This may take a moment.');

            try {
                const response = await fetch('/api/ai/generate-content', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        type,
                        specifications: { topic, audience, length, theme },
                        saveToDatabase
                    })
                });

                const data = await response.json();

                if (data.success) {
                    showAIResults(`
                        <h6>Generated ${type.toUpperCase()} Content (${data.wordCount} words)</h6>
                        <div class="card">
                            <div class="card-body">
                                <pre style="white-space: pre-wrap; font-size: 0.9em;">${data.content}</pre>
                            </div>
                        </div>
                        ${data.savedToDatabase ? '<div class="alert alert-success mt-2">✅ Content saved to database</div>' : ''}
                    `);
                } else {
                    throw new Error(data.error);
                }
            } catch (error) {
                showAIResults(`<div class="alert alert-danger">Error: ${error.message}</div>`);
            }
        }

        async function performAISearch() {
            const query = document.getElementById('aiSearchQuery').value;
            const limit = document.getElementById('aiSearchLimit').value;

            if (!query) {
                alert('Please enter a search query');
                return;
            }

            showAIResults('Searching with AI...');

            try {
                const response = await fetch('/api/ai/search', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query, limit: parseInt(limit) })
                });

                const data = await response.json();

                if (data.success) {
                    showAIResults(`
                        <h6>Search Results for "${data.query}"</h6>
                        <pre style="white-space: pre-wrap; font-size: 0.9em;">${JSON.stringify(data.results, null, 2)}</pre>
                    `);
                } else {
                    throw new Error(data.error);
                }
            } catch (error) {
                showAIResults(`<div class="alert alert-danger">Error: ${error.message}</div>`);
            }
        }        function showAIResults(content) {
            const resultsDiv = document.getElementById('aiResults');
            const resultContent = document.getElementById('aiResultContent');
            
            resultContent.innerHTML = content;
            resultsDiv.style.display = 'block';
            
            // Scroll to results
            resultsDiv.scrollIntoView({ behavior: 'smooth' });
        }

        // New AI Functions for Enhanced Dashboard

        async function runDatabaseAnalysis() {
            const button = document.getElementById('analysisButtonText');
            const spinner = document.getElementById('analysisSpinner');
            const resultsDiv = document.getElementById('aiAnalysisResults');
            const resultContent = document.getElementById('analysisResultContent');
            
            // Show loading state
            button.textContent = 'Analyzing...';
            spinner.style.display = 'inline-block';
            
            try {
                const response = await fetch('/api/ai/analyze-database', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const data = await response.json();

                if (data.success) {
                    resultContent.innerHTML = `
                        <div class="mb-3">
                            <strong>Analysis completed at:</strong> ${new Date(data.timestamp).toLocaleString()}
                        </div>
                        <div class="card">
                            <div class="card-body">
                                <pre style="white-space: pre-wrap; font-size: 0.9em; max-height: 400px; overflow-y: auto;">${data.report}</pre>
                            </div>
                        </div>
                    `;
                    resultsDiv.style.display = 'block';
                    resultsDiv.scrollIntoView({ behavior: 'smooth' });
                } else {
                    throw new Error(data.error || 'Analysis failed');
                }
            } catch (error) {
                resultContent.innerHTML = `<div class="alert alert-danger">Error: ${error.message}</div>`;
                resultsDiv.style.display = 'block';
            } finally {
                // Reset button state
                button.textContent = 'Analyze All Content';
                spinner.style.display = 'none';
            }
        }

        function showContentGenerator() {
            const modal = new bootstrap.Modal(document.getElementById('contentGeneratorModal'));
            modal.show();
        }

        // Content type change handler
        document.getElementById('contentType').addEventListener('change', function() {
            const storyFields = document.getElementById('storyFields');
            if (this.value === 'story') {
                storyFields.style.display = 'block';
            } else {
                storyFields.style.display = 'none';
            }
        });

        async function generateContent() {
            const button = document.getElementById('generateButtonText');
            const spinner = document.getElementById('generateSpinner');
            
            const type = document.getElementById('contentType').value;
            const topic = document.getElementById('contentTopic').value;
            const audience = document.getElementById('contentAudience').value;
            const length = document.getElementById('contentLength').value;
            const perspective = document.getElementById('storyPerspective').value;
            const setting = document.getElementById('storySetting').value;
            const saveToDatabase = document.getElementById('saveToDatabase').checked;

            if (!type) {
                alert('Please select a content type');
                return;
            }

            // Show loading state
            button.textContent = 'Generating...';
            spinner.style.display = 'inline-block';

            try {
                const specifications = { topic, audience, length };
                if (type === 'story') {
                    specifications.perspective = perspective;
                    specifications.setting = setting;
                }

                const response = await fetch('/api/ai/generate-content', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        type,
                        specifications,
                        saveToDatabase
                    })
                });

                const data = await response.json();

                if (data.success) {
                    // Hide the generator modal
                    const generatorModal = bootstrap.Modal.getInstance(document.getElementById('contentGeneratorModal'));
                    generatorModal.hide();
                    
                    // Show the generated content modal
                    document.getElementById('generatedContentDisplay').textContent = data.content;
                    const contentModal = new bootstrap.Modal(document.getElementById('generatedContentModal'));
                    contentModal.show();
                    
                    // Reset form
                    document.getElementById('contentGeneratorForm').reset();
                } else {
                    throw new Error(data.error || 'Content generation failed');
                }
            } catch (error) {
                alert(`Error: ${error.message}`);
            } finally {
                // Reset button state
                button.textContent = 'Generate Content';
                spinner.style.display = 'none';
            }
        }

        // AI Search form handler
        document.getElementById('aiSearchForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const query = document.getElementById('searchQuery').value;
            const limit = document.getElementById('searchLimit').value;
            const resultsDiv = document.getElementById('searchResults');
            const resultContent = document.getElementById('searchResultContent');

            if (!query.trim()) {
                alert('Please enter a search query');
                return;
            }

            // Show loading
            resultContent.innerHTML = '<div class="text-center"><span class="spinner-border"></span> Searching...</div>';
            resultsDiv.style.display = 'block';

            try {
                const response = await fetch('/api/ai/search', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query, limit: parseInt(limit) })
                });

                const data = await response.json();

                if (data.success) {
                    let resultsHtml = `<div class="mb-3"><strong>Found ${data.results.length} results for "${query}"</strong></div>`;
                    
                    if (data.results.length > 0) {
                        data.results.forEach((result, index) => {
                            resultsHtml += `
                                <div class="card mb-3">
                                    <div class="card-body">
                                        <h6 class="card-title">${index + 1}. ${result.title}</h6>
                                        <p class="card-text"><small class="text-muted">${result.url}</small></p>
                                        <div class="mb-2">
                                            <span class="badge bg-primary">Score: ${result.score}</span>
                                            <span class="badge bg-secondary">Keywords: ${result.keywords || 'N/A'}</span>
                                        </div>
                                        <p class="card-text">${result.summary || 'No summary available'}</p>
                                    </div>
                                </div>
                            `;
                        });
                    } else {
                        resultsHtml += '<div class="alert alert-info">No results found for your query.</div>';
                    }
                    
                    resultContent.innerHTML = resultsHtml;
                } else {
                    throw new Error(data.error || 'Search failed');
                }
            } catch (error) {
                resultContent.innerHTML = `<div class="alert alert-danger">Error: ${error.message}</div>`;
            }
        });

        function copyToClipboard() {
            const content = document.getElementById('generatedContentDisplay').textContent;
            navigator.clipboard.writeText(content).then(function() {
                // Show temporary success message
                const button = event.target;
                const originalText = button.innerHTML;
                button.innerHTML = '<i class="bi bi-check me-1"></i>Copied!';
                button.classList.remove('btn-primary');
                button.classList.add('btn-success');
                
                setTimeout(() => {
                    button.innerHTML = originalText;
                    button.classList.remove('btn-success');
                    button.classList.add('btn-primary');
                }, 2000);
            }).catch(function(err) {
                alert('Failed to copy content: ' + err);
            });
        }
    </script>
</body>
</html>
